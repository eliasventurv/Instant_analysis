"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { ArrowLeft, RotateCcw, X } from "lucide-react"
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  ScatterChart,
  Scatter,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts"

interface DashboardProps {
  charts: any[]
  onBackToAnalysis: () => void
  onStartOver: () => void
  onDeleteChart: (index: number) => void // Added delete chart prop
}

const COLORS = ["#3b82f6", "#8b5cf6", "#06b6d4", "#f59e0b", "#ef4444"]

export function Dashboard({ charts, onBackToAnalysis, onStartOver, onDeleteChart }: DashboardProps) {
  const renderChart = (chart: any, index: number) => {
    const data = chart.data || []

    switch (chart.chart_type) {
      case "bar":
        return (
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey={chart.parameters.x_axis} />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey={chart.parameters.y_axis || "count"} fill={COLORS[index % COLORS.length]} />
            </BarChart>
          </ResponsiveContainer>
        )

      case "line":
        return (
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey={chart.parameters.x_axis} />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line
                type="monotone"
                dataKey={chart.parameters.y_axis}
                stroke={COLORS[index % COLORS.length]}
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        )

      case "pie":
        return (
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={data}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                nameKey={chart.parameters.category || chart.parameters.x_axis}
              >
                {data.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        )

      case "scatter":
        return (
          <ResponsiveContainer width="100%" height={300}>
            <ScatterChart data={data}>
              <CartesianGrid />
              <XAxis dataKey={chart.parameters.x_axis} />
              <YAxis dataKey={chart.parameters.y_axis} />
              <Tooltip cursor={{ strokeDasharray: "3 3" }} />
              <Scatter dataKey={chart.parameters.y_axis} fill={COLORS[index % COLORS.length]} />
            </ScatterChart>
          </ResponsiveContainer>
        )

      default:
        return (
          <div className="flex items-center justify-center h-[300px] text-muted-foreground">Unsupported chart type</div>
        )
    }
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h2 className="text-3xl font-bold text-foreground mb-2">Your Custom Dashboard</h2>
          <p className="text-muted-foreground">
            {charts.length} chart{charts.length !== 1 ? "s" : ""} automatically generated by AI
          </p>
        </div>

        <div className="flex gap-3">
          <Button variant="outline" onClick={onBackToAnalysis}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to analysis
          </Button>

          <Button variant="outline" onClick={onStartOver}>
            <RotateCcw className="h-4 w-4 mr-2" />
            New analysis
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {charts.map((chart, index) => (
          <Card key={index} className="col-span-1 relative group">
            <Button
              variant="ghost"
              size="sm"
              className="absolute top-2 right-2 h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity z-10 hover:bg-destructive hover:text-destructive-foreground"
              onClick={() => onDeleteChart(index)}
            >
              <X className="h-4 w-4" />
            </Button>

            <CardHeader>
              <CardTitle className="text-lg pr-8">{chart.title}</CardTitle>
              <p className="text-sm text-muted-foreground">{chart.insight}</p>
            </CardHeader>
            <CardContent>{renderChart(chart, index)}</CardContent>
          </Card>
        ))}
      </div>

      {charts.length === 0 && (
        <div className="text-center py-12">
          <p className="text-muted-foreground mb-4">No charts selected to display</p>
          <Button onClick={onBackToAnalysis}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to analysis
          </Button>
        </div>
      )}
    </div>
  )
}
